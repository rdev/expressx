#!/usr/bin/env node

require('dotenv').config();
require('source-map-support').install({ hookRequire: true });
const http = require('http');
const https = require('https');
const { join } = require('path');
const fs = require('fs-extra');
const chalk = require('chalk');
const prepare = require('../dist/lib/prepare').default;
const config = require('../dist/lib/config').default;

/* eslint-disable global-require, import/no-dynamic-require, security/detect-non-literal-require */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (Number.isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

if (!fs.existsSync(join(process.cwd(), '.expressx/build/app.js'))) {
	console.log();
	console.error(chalk.bgRed.black(' ERROR '), chalk.red('Build not found'));
	console.log();
	console.log(`Did you forget to run "${chalk.bold('expressx build')}"?`);
	console.log();

	// eslint-disable-next-line unicorn/no-process-exit
	process.exit(1);
}

const appJS = require(join(process.cwd(), '.expressx/build/app.js'));

const appInitializer = appJS.default;
const { prepareServer } = appJS;

const startServer = async () => {
	const app = await prepare(appInitializer);

	const port = normalizePort(process.env.PORT || config.port || '3000');
	app.set('port', port);

	let server;

	if (config.https && config.https.key && config.https.cert) {
		server = https.createServer(
			{
				key: fs.readFileSync(config.https.key),
				cert: fs.readFileSync(config.https.cert),
			},
			app,
		);
	} else {
		server = http.createServer(app);
	}

	if (typeof prepareServer === 'function') {
		console.log(chalk.gray("> Running 'prepareServer' found in app.js"));
		await prepareServer(server);
	}

	server.listen(port);
	server.on('error', (error) => {
		if (error.syscall !== 'listen') {
			throw error;
		}

		const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

		// handle specific listen errors with friendly messages
		switch (error.code) {
			case 'EACCES':
				console.error(
					chalk.bgYellow.black(' WARNING '),
					chalk.yellow(`${bind} requires elevated privileges`),
				);
				process.exit(1); // eslint-disable-line unicorn/no-process-exit
				break;
			case 'EADDRINUSE':
				console.error(chalk.bgRed.black(' ERROR '), chalk.red(`${bind} is already in use`));
				process.exit(1); // eslint-disable-line unicorn/no-process-exit
				break;
			default:
				throw error;
		}
	});

	server.on('listening', () => {
		process.send('EXPRESSX:READY');
		const addr = server.address();
		const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
		console.clear();
		console.log(chalk.bgGreen.black(' DONE '), chalk.green(`Ready on port ${bind}`));
	});
};

startServer();
